# ~/.circleci/config.yml
version: 2
aliases:
  - &redis_version redis:3.2.10
  - &postgres_version circleci/postgres:10
  - &elasticsearch_version docker.elastic.co/elasticsearch/elasticsearch:7.9.3
  - &python_version circleci/python:3.7
  - &kibana_version docker.elastic.co/kibana/kibana:7.9.3

  - &unit_base_envs
    DEBUG: True
    DJANGO_SECRET_KEY: DJANGO_SECRET_KEY
    DJANGO_SETTINGS_MODULE: config.settings.test
    DJANGO_BASE_DIR: /app
    DIT_HELPDESK_ADMIN_PASSWORD: DIT_HELPDESK_ADMIN_PASSWORD
    DJANGO_POSTGRES_HOST: DJANGO_POSTGRES_HOST
    DJANGO_POSTGRES_DATABASE: DJANGO_POSTGRES_DATABASE
    DJANGO_POSTGRES_USER: DJANGO_POSTGRES_USER
    DJANGO_POSTGRES_PASSWORD: DJANGO_POSTGRES_PASSWORD
    DJANGO_POSTGRES_PORT: DJANGO_POSTGRES_PORT
    ALLOWED_HOSTS: 127.0.0.1,localhost
    RESTRICT_ADMIN: True
    ALLOWED_ADMIN_IPS: 127.0.0.1,
    ALLOWED_ADMIN_IP_RANGES: 127.0.0.1/32,
    LOGIN_URL: LOGIN_URL
    LOGIN_REDIRECT_URL: LOGIN_REDIRECT_URL
    IP_SAFELIST_XFF_INDEX: IP_SAFELIST_XFF_INDEX
    APP_START_DOMAIN: /choose-country/
    LOG_LEVEL: INFO
    DIRECTORY_CLIENT_CORE_CACHE_EXPIRE_SECONDS: 0
    DIRECTORY_CLIENT_CORE_CACHE_LOG_THROTTLING_SECONDS: 0
    SENTRY_ENVIRONMENT: docker-development
    SENTRY_DSN: SENTRY_DSN
    FEEDBACK_EMAIL: FEEDBACK_EMAIL
    FEEDBACK_CONTACT: FEEDBACK_CONTACT
    DEFRA_EMAIL: DEFRA_EMAIL
    DEFRA_CONTACT: DEFRA_CONTACT
    BEIS_EMAIL: BEIS_EMAIL
    BEIS_CONTACT: BEIS_CONTACT
    DDAT_CONTACT: "DDAT Support Team"
    DIT_CONTACT: "DIT EU Exit Team"
    CONTACT_SUBJECT: "New UK Trade Helpdesk enquiry"
    FEEDBACK_SUBJECT: "UK Trade Helpdesk feedback"
    SERVICE_NAME: "twuk"
    DIT_SUBDOMAIN: "dit"
    DIT_SUBJECT_SUFFIX: " - DIT EU Exit Enquiries"
    DDAT_SUBJECT_SUFFIX: " - DDAT Support Team"
    HMRC_TAX_FORM_URL: HMRC_TAX_FORM_URL
    HELPDESK_GA_GTM: HELPDESK_GA_GTM
    QUOTA_DEFAULT_MESSAGE: "You can check the availability of this quota by contacting the relevant department."
    TEST_OUTPUT_DIR: "./test-reports/"
    FEEDBACK_DESTINATION_EMAIL: going@to.com

  # Redis container
  - &docker_redis
    image: *redis_version
    environment:
      REDIS_URL: "redis://localhost:6379/"

  # Postgres container
  - &docker_postgres
    image: *postgres_version
    name: postgres
    #    password: test_db_psswd
    environment:
      POSTGRES_DB: helpdesk
      POSTGRES_HOST_AUTH_METHOD: trust

  # Elasticsearch container
  - &docker_elasticsearch
    image: *elasticsearch_version
    name: es
    environment:
      ES_URL: http://es:9200
      discovery.type: single-node

  # Python container
  - &docker_python
    image: *python_version

  # Helpdesk test container
  - &docker_helpdesk_test
    image: ukti/dit-helpdesk-test:latest

  # Step for ui test* jobs
  - &wait_for_backend
    run:
      name: Wait for backend
      command: dockerize -wait http://localhost:8000/choose-country/ -timeout 300s

jobs:
  unit_tests:
    docker:
      - <<: *docker_python
        environment: *unit_base_envs
      - *docker_postgres
      - *docker_elasticsearch
      - *docker_redis
    working_directory: /tmp/app
    steps:
      - checkout
      - run:
          name: Install system deps
          command: sudo apt-get update && sudo apt-get install -y graphviz libgraphviz-dev nodejs npm
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - v2-dependencies-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          command: pipenv install --system --dev
      - save_cache:
          key: v2-dependencies-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - ~/.local/share/virtualenvs/venv
      - run:
          name: Webpack build
          command: npm install && npm run build
      - run:
          name: Running tests
          command: coverage run manage.py test dit_helpdesk --settings=config.settings.test
      - run:
          name: Generate coverage
          command: |
            coverage report
            coverage html -d ./test-reports/coverage_html
      - run:
          name: Lint migrations
          command: ./lint_migrations.sh
      - store_test_results:
          path: ./test-reports/
      - store_artifacts:
          path: ./test-reports/coverage_html

  format_checks:
    docker:
      - <<: *docker_python
        environment: *unit_base_envs
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Install system deps
          command: sudo apt-get update && sudo apt-get install -y graphviz libgraphviz-dev nodejs npm
      - restore_cache:
          keys:
            - v2-dependencies-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          command: pipenv install --system --dev
      - restore_cache:
          keys:
            - pre-commit-cache-{{ arch }}-{{ .Branch }}
      - run:
          name: Formatting checks
          command: pre-commit run --from-ref origin/HEAD --to-ref HEAD
      - save_cache:
          key: pre-commit-cache-{{ arch }}-{{ .Branch }}
          paths:
            - ~/.cache/pre-commit

# CircleCI workflows
workflows:
  version: 2
  helpdesk:
    jobs:
      - unit_tests
      - format_checks
